#include "state_settings.h"

#include "state.h"
#include "buttons.h"
#include "ui_menu.h"
#include "ui.h"

//#include "pstr_helper.h"

static const unsigned char diversityIcon [] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x01, 0xF8, 0x0E, 0x00, 0x01, 0xFC, 0x1F, 0x00, 0x01, 0xCE,
	0x1F, 0x02, 0x21, 0xCE, 0x3B, 0x86, 0x31, 0xCC, 0x3B, 0x8F, 0xF9, 0xF8, 0x7B, 0xDF, 0xFD, 0xFE,
	0x71, 0xCF, 0xF9, 0xC7, 0x7F, 0xC6, 0x31, 0xC7, 0xFF, 0xE2, 0x21, 0xC7, 0xE0, 0xE0, 0x01, 0xFE,
	0xC0, 0x70, 0x01, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static const unsigned char rssiIcon [] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x0F, 0x00,
	0x00, 0x00, 0x0F, 0x3C, 0x00, 0x00, 0x0F, 0x3C, 0x00, 0x00, 0x0F, 0x3C, 0x00, 0x00, 0x0F, 0x3C,
	0x00, 0x00, 0x0F, 0x3C, 0x00, 0x00, 0x0F, 0x3C, 0x00, 0x03, 0xCF, 0x3C, 0x00, 0x03, 0xCF, 0x3C,
	0x00, 0x03, 0xCF, 0x3C, 0x00, 0x03, 0xCF, 0x3C, 0x00, 0x03, 0xCF, 0x3C, 0x00, 0x03, 0xCF, 0x3C,
	0x00, 0xF3, 0xCF, 0x3C, 0x00, 0xF3, 0xCF, 0x3C, 0x00, 0xF3, 0xCF, 0x3C, 0x00, 0xF3, 0xCF, 0x3C,
	0x3C, 0xF3, 0xCF, 0x3C, 0x3C, 0xF3, 0xCF, 0x3C, 0x3C, 0xF3, 0xCF, 0x3C, 0x3C, 0xF3, 0xCF, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static const unsigned char exitIcon [] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x03, 0xFF, 0xB9, 0xC0, 0x03, 0xFF, 0xBC, 0xC0,
	0x03, 0x00, 0x3E, 0x40, 0x03, 0x00, 0x3F, 0x40, 0x03, 0x00, 0x3F, 0x40, 0x03, 0x00, 0x3F, 0x40,
	0x03, 0x00, 0x3F, 0x40, 0x03, 0x00, 0x3F, 0x40, 0x02, 0x00, 0x3F, 0x40, 0x02, 0xF0, 0x3F, 0x40,
	0x02, 0x78, 0x3F, 0x40, 0x00, 0x3C, 0x3F, 0x40, 0x3F, 0xFE, 0x3F, 0x40, 0x3F, 0xFF, 0x3F, 0x40,
	0x3F, 0xFF, 0x31, 0x40, 0x3F, 0xFE, 0x33, 0x40, 0x00, 0x3C, 0x3F, 0x40, 0x02, 0x78, 0x3F, 0x40,
	0x02, 0xF0, 0x3F, 0x40, 0x02, 0x00, 0x3F, 0x40, 0x03, 0x00, 0x3F, 0x40, 0x03, 0x00, 0x3F, 0x40,
	0x03, 0x00, 0x3F, 0x40, 0x03, 0x00, 0x3F, 0x40, 0x03, 0x00, 0x3F, 0x40, 0x03, 0x7F, 0xBF, 0x40,
	0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
static const unsigned char callsignIcon [] = {
		0x00,0x3f,0xfc,0x00,
		0x01,0xff,0xff,0x80,
		0x03,0xe0,0x0f,0xc0,
		0x07,0x80,0x03,0xe0,
		0x0f,0x80,0x01,0xf0,
		0x0f,0x00,0x00,0xf0,
		0x0f,0x00,0x00,0xf0,
		0x0f,0x80,0x01,0xf0,
		0x07,0xc0,0x03,0xe0,
		0x01,0xfc,0x3f,0x80,
		0x00,0x7f,0xfe,0x00,
		0x00,0x0f,0xf0,0x00,
		0x1f,0xff,0xff,0xf8,
		0x7f,0xff,0xff,0xfe,
		0xf8,0x00,0x00,0x1e,
		0xf0,0x00,0x00,0x0e,
		0xf0,0x00,0x00,0x0e,
		0xf0,0x00,0x00,0x0e,
		0xf0,0xf0,0x0f,0x0e,
		0xf0,0xf0,0x0f,0x0e,
		0xf0,0xf0,0x0f,0x0e,
		0x7c,0xf0,0x0f,0x3e,
		0x3f,0xf0,0x0f,0xfc,
		0x07,0xf0,0x0f,0xe0,
		0x00,0xf0,0x0f,0x00,
		0x00,0xf0,0x0f,0x00,
		0x00,0xf0,0x0f,0x00,
		0x00,0xf0,0x0f,0x00,
		0x00,0xf0,0x0f,0x00,
		0x00,0xf0,0x0f,0x00,
		0x00,0xff,0xff,0x00,
		0x00,0xff,0xff,0x00
};

static void diveristyModeMenuHandler();
static void rssiCalibrationMenuHandler();
static void callsignMenuHandler();
static void exitMenuHandler();

void StateMachine::SettingsStateHandler::onEnter() {
	this->menu.reset();
	this->menu.addItem("RSSI Cal", rssiIcon, rssiCalibrationMenuHandler);
	this->menu.addItem("Div. Mode", diversityIcon, diveristyModeMenuHandler);
#ifdef CALLSIGN
	this->menu.addItem("Callsign", callsignIcon, callsignMenuHandler);
#endif
	this->menu.addItem("Exit", exitIcon, exitMenuHandler);
}

void StateMachine::SettingsStateHandler::onExit() {

}

void StateMachine::SettingsStateHandler::onUpdate() {

}

void StateMachine::SettingsStateHandler::onButtonChange(
    Button button,
    Buttons::PressType pressType
) {
    if (pressType != Buttons::PressType::SHORT)
        return;

    switch (button) {
        case Button::UP:
            this->menu.selectPreviousItem();
            Ui::needUpdate();
            break;

        case Button::DOWN:
            this->menu.selectNextItem();
            Ui::needUpdate();
            break;

        case Button::MODE:
            this->menu.activateItem();
            break;
    }
}

static void diveristyModeMenuHandler() {
	StateMachine::switchState(StateMachine::State::SETTINGS_DIVERSITY_MODE);
}

static void rssiCalibrationMenuHandler(){
	StateMachine::switchState(StateMachine::State::SETTINGS_RSSI);
}

static void callsignMenuHandler(){
	StateMachine::switchState(StateMachine::State::SETTINGS_CALLSIGN);
}

static void exitMenuHandler(){
	StateMachine::switchState(StateMachine::State::MENU);
}
